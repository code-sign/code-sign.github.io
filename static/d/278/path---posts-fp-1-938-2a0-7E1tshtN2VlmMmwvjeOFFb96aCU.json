{"data":{"site":{"siteMetadata":{"author":{"name":"Songs","contacts":{"twitter":"#"}},"disqusShortname":"","subtitle":"Pellentesque odio nisi, euismod in, pharetra a, ultricies in, diam. Sed arcu.","title":"Songs","url":"https://code-sign.netlify.com"}},"markdownRemark":{"id":"4d7ed76f-5b99-5f8f-889e-e3a97e760ae8","html":"<!-- - [The first transition](#the-first-transition) -->\n<ul>\n<li><a href=\"#1.1%20%ED%95%A8%EC%88%98%ED%98%95%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%80%20%EA%B3%BC%EC%97%B0%20%EC%9C%A0%EC%9A%A9%ED%95%9C%EA%B0%80?\">1.1 함수형 프로그래밍은 과연 유용한가?</a></li>\n<li><a href=\"#1.2%20%ED%95%A8%EC%88%98%ED%98%95%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80?\">1.2 함수형 프로그래밍이란?</a></li>\n</ul>\n<h1 id=\"part1-함수형으로-사고하기\"><a href=\"#part1-%ED%95%A8%EC%88%98%ED%98%95%EC%9C%BC%EB%A1%9C-%EC%82%AC%EA%B3%A0%ED%95%98%EA%B8%B0\" aria-label=\"part1 함수형으로 사고하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part1 함수형으로 사고하기</h1>\n<h2 id=\"chapter1-함수형-길들이기\"><a href=\"#chapter1-%ED%95%A8%EC%88%98%ED%98%95-%EA%B8%B8%EB%93%A4%EC%9D%B4%EA%B8%B0\" aria-label=\"chapter1 함수형 길들이기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chapter1 함수형 길들이기</h2>\n<p>date : 19.02.18</p>\n<blockquote>\n<p>객체지향(OO)은 가동부를 캡슐화하여 코드의 이해를 도움</p>\n<p>함수형 프로그래밍은(FP)은 <code class=\"language-text\">가동부를 최소화</code>하여 코드의 이해를 도움</p>\n</blockquote>\n<hr>\n<h3 id=\"11-함수형-프로그래밍은-과연-유용한가\"><a href=\"#11-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%80-%EA%B3%BC%EC%97%B0-%EC%9C%A0%EC%9A%A9%ED%95%9C%EA%B0%80\" aria-label=\"11 함수형 프로그래밍은 과연 유용한가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1 함수형 프로그래밍은 과연 유용한가?</h3>\n<p><strong>FP 사고방식</strong></p>\n<ul>\n<li>\n<p>확장성 : 추가 기능 확장이 용이하도록</p>\n</li>\n<li>\n<p>모듈화 용이성 : 다른 파일에 영향을 받지 않도록</p>\n</li>\n<li>\n<p>재사용성 : 중복을 줄이자</p>\n</li>\n<li>\n<p>테스트성 : 단위 테스트가 쉽도록</p>\n</li>\n<li>\n<p>헤아리기 쉬움 : 체계가 있고 따라하기 쉽도록</p>\n</li>\n</ul>\n<p><strong>기본개념</strong></p>\n<ul>\n<li>선언적 프로그래밍</li>\n<li>순수함수 : 상태변이를 일으키지 않도록</li>\n<li>참조 투명성</li>\n<li>불변성</li>\n</ul>\n<p>자바스크립트만의 매우 표현적인 특성을 가다듬어, 깔끔하면서도 모듈적인, 테스트하기 좋고 간결한 코드를 작성하는 데 도움이 되고 업무 능률 향상</p>\n<p>순수함수에 기반을 두고 이미 검증된 기법에 따라 구현하면 코드가 복잡해지더라도 헤아리기 쉬운 방향으로 작성할 수 있음</p>\n<p>전체 애플리케이션 품질을 향상시키는 동시에 자바스크립트 언어를 더 잘 이해할 수 있음</p>\n<hr>\n<h3 id=\"12-함수형-프로그래밍이란\"><a href=\"#12-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%B4%EB%9E%80\" aria-label=\"12 함수형 프로그래밍이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2 함수형 프로그래밍이란?</h3>\n<p><code class=\"language-text\">함수 사용을 강조</code>하는 소프트웨어 개발 스타일로 하나의 코드 작성 방법</p>\n<p>애플리케이션의 부수효과(side effect)를 방지하고 상태 변이(mutation of state)를 감소하기 위해 데이터의 제어 흐름과 연산을 추상(abstract)하는 것</p>\n<blockquote>\n<p>Before</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span>elementId<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tdocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`#elementId`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> \n\t<span class=\"token template-string\"><span class=\"token string\">`&lt;format>message&lt;/format>`</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>After</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> printMessage <span class=\"token operator\">=</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token function\">addToMsg</span><span class=\"token punctuation\">(</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> h1<span class=\"token punctuation\">,</span> echo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello songs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>함수형 프로그래밍의 기본원리</strong></p>\n<p>재사용성, 믿음성이 좋고 이해하기 쉬운 작은 조각들로 프로그램을 나눈 후,\n전체적으로 더 헤아리기 쉬운 형태의 프로그램으로 조합하는 과정</p>\n<p>코드를 쉽게 변경하기 위해 코드 자체를 매개변수화</p>\n<hr>\n<h4 id=\"121-함수형-프로그래밍은-선언적\"><a href=\"#121-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%80-%EC%84%A0%EC%96%B8%EC%A0%81\" aria-label=\"121 함수형 프로그래밍은 선언적 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.1 함수형 프로그래밍은 선언적</h4>\n<p><code class=\"language-text\">선언적(declarative)</code>프로그래밍 패러다임</p>\n<p>내부적으로 코드를 어떻게 구현했는지, 데이터는 어떻게 흘러가는지 밝히지 않은 채 연산/작업을 표현, 함수로 추상하는 작업</p>\n<p>제어 흐름이나 상태 변화를 특정하지 않고도 프로그램 로직이 무엇인지 표현식으로 나타냄</p>\n<p>함수를 매개변수로 받는 <code class=\"language-text\">map, reduce, filter</code>같은 고계함수를 이용해 재사용성, 확장성이 우수한 선언적 코드로 대체하자</p>\n<hr>\n<h4 id=\"122-순수함수와-부수효과\"><a href=\"#122-%EC%88%9C%EC%88%98%ED%95%A8%EC%88%98%EC%99%80-%EB%B6%80%EC%88%98%ED%9A%A8%EA%B3%BC\" aria-label=\"122 순수함수와 부수효과 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.2 순수함수와 부수효과</h4>\n<p><strong>순수함수</strong></p>\n<p><code class=\"language-text\">불변 프로그램 구축</code>을 전제로 함</p>\n<ul>\n<li>주어진 입력에만 의존하여 변경될 수 있는 숨겨진 값이나 외부상태와 무관하게 작동</li>\n<li>함수 수코프 밖에서 어떠한 변경도 일으키지 않음</li>\n</ul>\n<p>익숙한 명령형 프로그래밍에서는 변수가 옮겨지면서 그 값이 변하게 됨</p>\n<p>자신의 스코프에 없는 외부변수를 읽고 수정하게 되면서 부수효과를 일으키고 호출 도중에 언제라도 변할 수 있어서 어떤 값이 반환될지 알 수 없게 되는 문제 발생</p>\n<p>온갖 변경이 난무하는 프로그램에서 순수함수를 사용하기란 어려울수 있지만, <code class=\"language-text\">상태 변이를 줄이고 관리할 수 있는</code> 프레임워크를 제공하여 순수/불순 함수를 구분 하자</p>\n<p><code class=\"language-text\">커링(currying)</code>기법</p>\n<p>함수의 여러 인수를 부분적으로 나누어 세팅하여 쉽게 조합해서 실행 가능한 함수로 만듦</p>\n<hr>\n<h4 id=\"123-참조-투명성과-치환성\"><a href=\"#123-%EC%B0%B8%EC%A1%B0-%ED%88%AC%EB%AA%85%EC%84%B1%EA%B3%BC-%EC%B9%98%ED%99%98%EC%84%B1\" aria-label=\"123 참조 투명성과 치환성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.3 참조 투명성과 치환성</h4>\n<p>참조 투명성은 순수함수를 정의하는 공식적인 방법</p>\n<p><code class=\"language-text\">순수성</code> : 함수의 인수와 결괏값 사이의 순수한 매핑 관계</p>\n<p>어떤 함수가 동일한 입력을 받았을 때 동일한 결과를 내면 <code class=\"language-text\">참조 투명한</code>함수</p>\n<blockquote>\n<p>Before</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>counter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>외부 변수를 제거하고 함수 서명에 정규 매개변수로 명시</p>\n<blockquote>\n<p>After ES6 람다 표현식</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> counter <span class=\"token operator\">=></span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드 테스트와 전체 로직 파악 용이</p>\n<hr>\n<h4 id=\"124-불변-데이터-유지하기\"><a href=\"#124-%EB%B6%88%EB%B3%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"124 불변 데이터 유지하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2.4 불변 데이터 유지하기</h4>\n<p>기본형은 처음부터 불변이지만 배열 등의 객체는 불변이 아니어서 함수 인수로 전달해도 원래 내용이 변경되어 부수효과가 발생할 소지가 남아 있음, 이를 극복하는 방안은 다음 장 이후에…</p>\n<p><code class=\"language-text\">함수형 프로그래밍</code>은 외부에서 관찰 가능한 <code class=\"language-text\">부수효과가 제거</code>된 <code class=\"language-text\">불변 프로그램</code>을 작성하기 위해 <code class=\"language-text\">순수함수</code>를 <code class=\"language-text\">선언적</code>으로 평가하는 것</p>\n<hr>\n<p><strong>문제점</strong></p>\n<ul>\n<li>\n<p>뚜렷한 체계 없이 분기 처리 남발</p>\n</li>\n<li>\n<p>외부 공유 변수에 지나치게 의존하는 덩치 큰 함수 과용</p>\n</li>\n<li>\n<p>많은 파일이 한데 뒤섞여 추적/디버깅이 어려움</p>\n</li>\n<li>\n<p>가변/전역 데이터를 공유하는 촘촘한 그물망이 형성 됨</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"13-함수형-프로그래밍의-좋은-점\"><a href=\"#13-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%EC%A2%8B%EC%9D%80-%EC%A0%90\" aria-label=\"13 함수형 프로그래밍의 좋은 점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3 함수형 프로그래밍의 좋은 점</h3>\n<p>어떤점이 좋은지 3가지 측면에서 살펴보자</p>\n<ul>\n<li>간단한 함수들로 작업을 분해</li>\n<li>흐름 체인으로 데이터를 처리</li>\n<li>\n<h2 id=\"리액티브-패러다임을-실현하여-이벤트-중심-코드의-복잡성을-줄임\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84%EC%9D%84-%EC%8B%A4%ED%98%84%ED%95%98%EC%97%AC-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%A4%91%EC%8B%AC-%EC%BD%94%EB%93%9C%EC%9D%98-%EB%B3%B5%EC%9E%A1%EC%84%B1%EC%9D%84-%EC%A4%84%EC%9E%84\" aria-label=\"리액티브 패러다임을 실현하여 이벤트 중심 코드의 복잡성을 줄임 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액티브 패러다임을 실현하여 이벤트 중심 코드의 복잡성을 줄임</h2>\n</li>\n</ul>\n<h4 id=\"131-복잡한-작업을-분해하도록-유도\"><a href=\"#131-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%9E%91%EC%97%85%EC%9D%84-%EB%B6%84%ED%95%B4%ED%95%98%EB%8F%84%EB%A1%9D-%EC%9C%A0%EB%8F%84\" aria-label=\"131 복잡한 작업을 분해하도록 유도 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3.1 복잡한 작업을 분해하도록 유도</h4>\n<p>FP에서 모듈화는 단일성의 원리와 밀접한 관련</p>\n<p>모름지기 함수는 저마다 한 가지 목표만 바라봐야 한다</p>\n<p><code class=\"language-text\">합성</code>기법 : 두 함수를 합성하여 다음 함수에 밀어 넣는 새로운 함수가 탄생</p>\n<p>고수준의 추상화를 통해 자세한 내막을 밝히지 않아도 코드가 수행하는 전단계를 일목요연하게 나타냄</p>\n<hr>\n<h4 id=\"132-데이터를-매끄럽게-체이닝하여-처리\"><a href=\"#132-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%A7%A4%EB%81%84%EB%9F%BD%EA%B2%8C-%EC%B2%B4%EC%9D%B4%EB%8B%9D%ED%95%98%EC%97%AC-%EC%B2%98%EB%A6%AC\" aria-label=\"132 데이터를 매끄럽게 체이닝하여 처리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3.2 데이터를 매끄럽게 체이닝하여 처리</h4>\n<p>함수체인은 필요한 시점까지 실행을 미루는 느긋한 평가를 수행</p>\n<p>다른 데에선 쓸일이 없는 일련의 코드를 전부 실행하지 않아도 되니 CPU부하가 감소하여 성능 향상</p>\n<p>필요 시 호출 </p>\n<hr>\n<h4 id=\"133-복잡한-비동기-애플리케이션에서도-신속하게-반응\"><a href=\"#133-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%97%90%EC%84%9C%EB%8F%84-%EC%8B%A0%EC%86%8D%ED%95%98%EA%B2%8C-%EB%B0%98%EC%9D%91\" aria-label=\"133 복잡한 비동기 애플리케이션에서도 신속하게 반응 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3.3 복잡한 비동기 애플리케이션에서도 신속하게 반응</h4>\n<p><code class=\"language-text\">리액티브 프로그래밍</code></p>\n<ul>\n<li>비동기 데이터 흐름에 기반을 둔 프로그래밍 패러다임함수형 프로그래밍의 응용분야</li>\n<li>비동기 코드, 이벤트 중심 코드의 복잡도를 현저하게 줄이는데 도움</li>\n<li>더 높은 수준으로 코드를 추상하고 함수를 체인으로 묶고 합성</li>\n<li>순수함수를 이용하여 <code class=\"language-text\">map, reduce</code> 처럼 많이 쓰는 연산으로 데이터를 처리할 수 있고 람다 표현식의 간결함을 누릴 수 있다는 이점</li>\n<li>옵저버블(관찰 가능) 이라는 중요한 장치를 매개로 움직임</li>\n</ul>\n<hr>\n<h3 id=\"문제\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h3>\n<p><a href=\"https://www.codingame.com/playgrounds/2980/practical-introduction-to-functional-programming-with-js/currying\">Currying - 할인쿠폰 함수 만들기</a>))</p>","fields":{"tagSlugs":["/tag/fp/","/tag/web-development/"]},"frontmatter":{"date":"2019-02-18","description":"functonal programming","tags":["fp","Web Development"],"title":"FP1"}}},"pageContext":{"slug":"/posts/fp1/"}}